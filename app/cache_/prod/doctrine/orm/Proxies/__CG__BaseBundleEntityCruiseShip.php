<?php

namespace Proxies\__CG__\BaseBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class CruiseShip extends \BaseBundle\Entity\CruiseShip implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'BaseBundle\\Entity\\CruiseShip' . "\0" . 'id', '' . "\0" . 'BaseBundle\\Entity\\CruiseShip' . "\0" . 'title', '' . "\0" . 'BaseBundle\\Entity\\CruiseShip' . "\0" . 'code', '' . "\0" . 'BaseBundle\\Entity\\CruiseShip' . "\0" . 'motorship_id', '' . "\0" . 'BaseBundle\\Entity\\CruiseShip' . "\0" . 'properties', '' . "\0" . 'BaseBundle\\Entity\\CruiseShip' . "\0" . 'imgurl', '' . "\0" . 'BaseBundle\\Entity\\CruiseShip' . "\0" . 'class', '' . "\0" . 'BaseBundle\\Entity\\CruiseShip' . "\0" . 'cruises', '' . "\0" . 'BaseBundle\\Entity\\CruiseShip' . "\0" . 'cabins'];
        }

        return ['__isInitialized__', '' . "\0" . 'BaseBundle\\Entity\\CruiseShip' . "\0" . 'id', '' . "\0" . 'BaseBundle\\Entity\\CruiseShip' . "\0" . 'title', '' . "\0" . 'BaseBundle\\Entity\\CruiseShip' . "\0" . 'code', '' . "\0" . 'BaseBundle\\Entity\\CruiseShip' . "\0" . 'motorship_id', '' . "\0" . 'BaseBundle\\Entity\\CruiseShip' . "\0" . 'properties', '' . "\0" . 'BaseBundle\\Entity\\CruiseShip' . "\0" . 'imgurl', '' . "\0" . 'BaseBundle\\Entity\\CruiseShip' . "\0" . 'class', '' . "\0" . 'BaseBundle\\Entity\\CruiseShip' . "\0" . 'cruises', '' . "\0" . 'BaseBundle\\Entity\\CruiseShip' . "\0" . 'cabins'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (CruiseShip $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function __toString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', []);

        return parent::__toString();
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setTitle($title)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTitle', [$title]);

        return parent::setTitle($title);
    }

    /**
     * {@inheritDoc}
     */
    public function getTitle()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTitle', []);

        return parent::getTitle();
    }

    /**
     * {@inheritDoc}
     */
    public function setCode($code)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCode', [$code]);

        return parent::setCode($code);
    }

    /**
     * {@inheritDoc}
     */
    public function getCode()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCode', []);

        return parent::getCode();
    }

    /**
     * {@inheritDoc}
     */
    public function setProperties($properties)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setProperties', [$properties]);

        return parent::setProperties($properties);
    }

    /**
     * {@inheritDoc}
     */
    public function getProperties()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getProperties', []);

        return parent::getProperties();
    }

    /**
     * {@inheritDoc}
     */
    public function addProperty($name, $value)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addProperty', [$name, $value]);

        return parent::addProperty($name, $value);
    }

    /**
     * {@inheritDoc}
     */
    public function addCruise($code, \Doctrine\Common\Collections\ArrayCollection $categories)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addCruise', [$code, $categories]);

        return parent::addCruise($code, $categories);
    }

    /**
     * {@inheritDoc}
     */
    public function addCabin()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addCabin', []);

        return parent::addCabin();
    }

    /**
     * {@inheritDoc}
     */
    public function setImgurl($imgurl)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setImgurl', [$imgurl]);

        return parent::setImgurl($imgurl);
    }

    /**
     * {@inheritDoc}
     */
    public function getImgurl()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getImgurl', []);

        return parent::getImgurl();
    }

    /**
     * {@inheritDoc}
     */
    public function setClass(\BaseBundle\Entity\CruiseShipClass $class = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setClass', [$class]);

        return parent::setClass($class);
    }

    /**
     * {@inheritDoc}
     */
    public function getClass()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getClass', []);

        return parent::getClass();
    }

    /**
     * {@inheritDoc}
     */
    public function removeCruise(\BaseBundle\Entity\CruiseCruise $cruises)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeCruise', [$cruises]);

        return parent::removeCruise($cruises);
    }

    /**
     * {@inheritDoc}
     */
    public function getCruises()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCruises', []);

        return parent::getCruises();
    }

    /**
     * {@inheritDoc}
     */
    public function removeCabin(\BaseBundle\Entity\CruiseShipCabin $cabins)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeCabin', [$cabins]);

        return parent::removeCabin($cabins);
    }

    /**
     * {@inheritDoc}
     */
    public function getCabins()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCabins', []);

        return parent::getCabins();
    }

    /**
     * {@inheritDoc}
     */
    public function setMotorshipId($motorshipId)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMotorshipId', [$motorshipId]);

        return parent::setMotorshipId($motorshipId);
    }

    /**
     * {@inheritDoc}
     */
    public function getMotorshipId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMotorshipId', []);

        return parent::getMotorshipId();
    }

}
