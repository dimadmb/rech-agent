<?php

namespace Proxies\__CG__\BaseBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class CruiseShipCabin extends \BaseBundle\Entity\CruiseShipCabin implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'BaseBundle\\Entity\\CruiseShipCabin' . "\0" . 'id', '' . "\0" . 'BaseBundle\\Entity\\CruiseShipCabin' . "\0" . 'ship', '' . "\0" . 'BaseBundle\\Entity\\CruiseShipCabin' . "\0" . 'rtId', '' . "\0" . 'BaseBundle\\Entity\\CruiseShipCabin' . "\0" . 'deckId', '' . "\0" . 'BaseBundle\\Entity\\CruiseShipCabin' . "\0" . 'prices', '' . "\0" . 'BaseBundle\\Entity\\CruiseShipCabin' . "\0" . 'rooms'];
        }

        return ['__isInitialized__', '' . "\0" . 'BaseBundle\\Entity\\CruiseShipCabin' . "\0" . 'id', '' . "\0" . 'BaseBundle\\Entity\\CruiseShipCabin' . "\0" . 'ship', '' . "\0" . 'BaseBundle\\Entity\\CruiseShipCabin' . "\0" . 'rtId', '' . "\0" . 'BaseBundle\\Entity\\CruiseShipCabin' . "\0" . 'deckId', '' . "\0" . 'BaseBundle\\Entity\\CruiseShipCabin' . "\0" . 'prices', '' . "\0" . 'BaseBundle\\Entity\\CruiseShipCabin' . "\0" . 'rooms'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (CruiseShipCabin $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function init(\BaseBundle\Entity\CruiseShip $ship)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'init', [$ship]);

        return parent::init($ship);
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setShip(\BaseBundle\Entity\CruiseShip $ship = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setShip', [$ship]);

        return parent::setShip($ship);
    }

    /**
     * {@inheritDoc}
     */
    public function getShip()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getShip', []);

        return parent::getShip();
    }

    /**
     * {@inheritDoc}
     */
    public function addPrice(\BaseBundle\Entity\CruiseShipCabinCruisePrice $prices)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addPrice', [$prices]);

        return parent::addPrice($prices);
    }

    /**
     * {@inheritDoc}
     */
    public function removePrice(\BaseBundle\Entity\CruiseShipCabinCruisePrice $prices)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removePrice', [$prices]);

        return parent::removePrice($prices);
    }

    /**
     * {@inheritDoc}
     */
    public function getPrice(\BaseBundle\Entity\CruiseCruise $cruise)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPrice', [$cruise]);

        return parent::getPrice($cruise);
    }

    /**
     * {@inheritDoc}
     */
    public function setPrice(\BaseBundle\Entity\CruiseCruise $cruise, $price)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPrice', [$cruise, $price]);

        return parent::setPrice($cruise, $price);
    }

    /**
     * {@inheritDoc}
     */
    public function getPrices()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPrices', []);

        return parent::getPrices();
    }

    /**
     * {@inheritDoc}
     */
    public function setRtId(\BaseBundle\Entity\CruiseShipCabinType $rtId = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRtId', [$rtId]);

        return parent::setRtId($rtId);
    }

    /**
     * {@inheritDoc}
     */
    public function getRtId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRtId', []);

        return parent::getRtId();
    }

    /**
     * {@inheritDoc}
     */
    public function setDeckId(\BaseBundle\Entity\CruiseShipDeck $deckId = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDeckId', [$deckId]);

        return parent::setDeckId($deckId);
    }

    /**
     * {@inheritDoc}
     */
    public function getDeckId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDeckId', []);

        return parent::getDeckId();
    }

    /**
     * {@inheritDoc}
     */
    public function addRoom(\BaseBundle\Entity\CruiseShipRoom $rooms)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addRoom', [$rooms]);

        return parent::addRoom($rooms);
    }

    /**
     * {@inheritDoc}
     */
    public function removeRoom(\BaseBundle\Entity\CruiseShipRoom $rooms)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeRoom', [$rooms]);

        return parent::removeRoom($rooms);
    }

    /**
     * {@inheritDoc}
     */
    public function getRooms()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRooms', []);

        return parent::getRooms();
    }

}
