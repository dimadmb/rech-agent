<?php

namespace Proxies\__CG__\BaseBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Document extends \BaseBundle\Entity\Document implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'BaseBundle\\Entity\\Document' . "\0" . 'id', '' . "\0" . 'BaseBundle\\Entity\\Document' . "\0" . 'title', '' . "\0" . 'BaseBundle\\Entity\\Document' . "\0" . 'keywords', '' . "\0" . 'BaseBundle\\Entity\\Document' . "\0" . 'description', '' . "\0" . 'BaseBundle\\Entity\\Document' . "\0" . 'url', '' . "\0" . 'BaseBundle\\Entity\\Document' . "\0" . 'body', '' . "\0" . 'BaseBundle\\Entity\\Document' . "\0" . 'isactive', '' . "\0" . 'BaseBundle\\Entity\\Document' . "\0" . 'deletable', '' . "\0" . 'BaseBundle\\Entity\\Document' . "\0" . 'archieved', '' . "\0" . 'BaseBundle\\Entity\\Document' . "\0" . 'contenttitle', '' . "\0" . 'BaseBundle\\Entity\\Document' . "\0" . 'category_id', '' . "\0" . 'BaseBundle\\Entity\\Document' . "\0" . 'photos'];
        }

        return ['__isInitialized__', '' . "\0" . 'BaseBundle\\Entity\\Document' . "\0" . 'id', '' . "\0" . 'BaseBundle\\Entity\\Document' . "\0" . 'title', '' . "\0" . 'BaseBundle\\Entity\\Document' . "\0" . 'keywords', '' . "\0" . 'BaseBundle\\Entity\\Document' . "\0" . 'description', '' . "\0" . 'BaseBundle\\Entity\\Document' . "\0" . 'url', '' . "\0" . 'BaseBundle\\Entity\\Document' . "\0" . 'body', '' . "\0" . 'BaseBundle\\Entity\\Document' . "\0" . 'isactive', '' . "\0" . 'BaseBundle\\Entity\\Document' . "\0" . 'deletable', '' . "\0" . 'BaseBundle\\Entity\\Document' . "\0" . 'archieved', '' . "\0" . 'BaseBundle\\Entity\\Document' . "\0" . 'contenttitle', '' . "\0" . 'BaseBundle\\Entity\\Document' . "\0" . 'category_id', '' . "\0" . 'BaseBundle\\Entity\\Document' . "\0" . 'photos'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Document $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setTitle($title)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTitle', [$title]);

        return parent::setTitle($title);
    }

    /**
     * {@inheritDoc}
     */
    public function getTitle()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTitle', []);

        return parent::getTitle();
    }

    /**
     * {@inheritDoc}
     */
    public function setKeywords($keywords)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setKeywords', [$keywords]);

        return parent::setKeywords($keywords);
    }

    /**
     * {@inheritDoc}
     */
    public function getKeywords()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getKeywords', []);

        return parent::getKeywords();
    }

    /**
     * {@inheritDoc}
     */
    public function setDescription($description)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDescription', [$description]);

        return parent::setDescription($description);
    }

    /**
     * {@inheritDoc}
     */
    public function getDescription()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDescription', []);

        return parent::getDescription();
    }

    /**
     * {@inheritDoc}
     */
    public function setUrl($url)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUrl', [$url]);

        return parent::setUrl($url);
    }

    /**
     * {@inheritDoc}
     */
    public function getUrl()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUrl', []);

        return parent::getUrl();
    }

    /**
     * {@inheritDoc}
     */
    public function setBody($body)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setBody', [$body]);

        return parent::setBody($body);
    }

    /**
     * {@inheritDoc}
     */
    public function getBody()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBody', []);

        return parent::getBody();
    }

    /**
     * {@inheritDoc}
     */
    public function setIsactive($isactive)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIsactive', [$isactive]);

        return parent::setIsactive($isactive);
    }

    /**
     * {@inheritDoc}
     */
    public function getIsactive()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIsactive', []);

        return parent::getIsactive();
    }

    /**
     * {@inheritDoc}
     */
    public function setDeletable($deletable)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDeletable', [$deletable]);

        return parent::setDeletable($deletable);
    }

    /**
     * {@inheritDoc}
     */
    public function getDeletable()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDeletable', []);

        return parent::getDeletable();
    }

    /**
     * {@inheritDoc}
     */
    public function setArchieved($archieved)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setArchieved', [$archieved]);

        return parent::setArchieved($archieved);
    }

    /**
     * {@inheritDoc}
     */
    public function getArchieved()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getArchieved', []);

        return parent::getArchieved();
    }

    /**
     * {@inheritDoc}
     */
    public function setContenttitle($contenttitle)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setContenttitle', [$contenttitle]);

        return parent::setContenttitle($contenttitle);
    }

    /**
     * {@inheritDoc}
     */
    public function getContenttitle()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getContenttitle', []);

        return parent::getContenttitle();
    }

    /**
     * {@inheritDoc}
     */
    public function setCategoryId(\BaseBundle\Entity\DocumentCategory $categoryId = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCategoryId', [$categoryId]);

        return parent::setCategoryId($categoryId);
    }

    /**
     * {@inheritDoc}
     */
    public function getCategoryId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCategoryId', []);

        return parent::getCategoryId();
    }

    /**
     * {@inheritDoc}
     */
    public function addPhoto(\BaseBundle\Entity\Photo $photos)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addPhoto', [$photos]);

        return parent::addPhoto($photos);
    }

    /**
     * {@inheritDoc}
     */
    public function removePhoto(\BaseBundle\Entity\Photo $photos)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removePhoto', [$photos]);

        return parent::removePhoto($photos);
    }

    /**
     * {@inheritDoc}
     */
    public function getPhotos()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPhotos', []);

        return parent::getPhotos();
    }

}
